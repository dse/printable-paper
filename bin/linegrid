#!/usr/bin/env perl
use warnings;
use strict;
use open qw(:locale);

use FindBin;
use lib "${FindBin::Bin}/../lib";

use My::RuledPaper;
use My::RuledPaper::Constants qw(:all);
use My::RuledPaper::MonkeyPatch::Drawing;

use List::Util qw(all);
use Scalar::Util qw(looks_like_number);

my $NON_REPRO_BLUE = COLOR_NON_REPRO_BLUE;

my $FEINT_STROKE_WIDTH = 1/600 * IN;
my $MINOR_STROKE_WIDTH = 2/600 * IN;
my $MAJOR_STROKE_WIDTH = 4/600 * IN;

my $style = shift(@ARGV) // '10';

my $p = My::RuledPaper->new(HALF_LETTER);

$p->{style} = <<"END";
line, rect {
    fill: none;
    stroke-width: ${FEINT_STROKE_WIDTH}px;
    stroke: ${NON_REPRO_BLUE};
    stroke-linecap: round;
    stroke-linejoin: round;
}
.minor {
    stroke-width: ${MINOR_STROKE_WIDTH}px;
}
.major {
    stroke-width: ${MAJOR_STROKE_WIDTH}px;
}
END

use POSIX qw(floor);

my $shiftUp = (HALF_LETTER_HEIGHT_PX - A5_HEIGHT_PX) / 2;

my $cx = $p->{width} / 2;
my $cy = $p->{height} / 2 - $shiftUp;

my ($spacing, $major, $startX, $endX, $startY, $endY, $minor);
if ($style eq '12') {
    ($spacing, $major) = (2 * MM, 12);
    ($startX, $endX) = (-30, 30);
    ($startY, $endY) = (-50, 50);
} elsif ($style eq '412') {
    ($spacing, $major) = (2 * MM, 12);
    ($startX, $endX) = (-30, 30);
    ($startY, $endY) = (-50, 50);
    $minor = 3;
} elsif ($style eq '10') {
    ($spacing, $major) = (2.5 * MM, 10);
    ($startX, $endX) = (-25, 25);
    ($startY, $endY) = (-40, 40);
} else {
    die("invalid linegrid style: $style\n");
}

my $centerX = 0;
my $centerY = 0;
if ($major && ($major % 2 == 0)) {
    if ($endX % $major >= ($major / 2)) {
        $centerX = $major / 2;
    }
}
if ($minor && ($minor % 2 == 0)) {
    if ($endY % $major >= ($major / 2)) {
        $centerY = $major / 2;
    }
}

my $startXX = $cx + $startX * $spacing;
my $endXX   = $cx + $endX   * $spacing;
my $startYY = $cy + $startY * $spacing;
my $endYY   = $cy + $endY   * $spacing;

for (my $x = $startX; $x <= $endX; $x += 1) {
    my $xx = $cx + $x * $spacing;
    my $class = 'feint';
    if (($x + $centerX) % $major == 0) {
        $class = 'major';
    } elsif ($minor && (($x + $centerX) % $minor == 0)) {
        $class = 'minor';
    }
    $p->line($xx, $startYY, $xx, $endYY, class => $class);
}
for (my $y = $startY; $y <= $endY; $y += 1) {
    my $yy = $cy + $y * $spacing;
    my $class = 'feint';
    if (($y + $centerY) % $major == 0) {
        $class = 'major';
    } elsif ($minor && (($y + $centerY) % $minor == 0)) {
        $class = 'minor';
    }
    $p->line($startXX, $yy, $endXX, $yy, class => $class);
}

print($p->svg());

# Local Variables:
# after-save-hook: ((lambda () (shell-command "cd .. && make")))
# End:
