#!/usr/bin/env perl
use warnings;
use strict;
use open qw(:locale);
use File::Basename qw(basename);
our $PROGNAME = basename($0);
$PROGNAME =~ s{\.pl$}{};

use FindBin;
use lib "${FindBin::Bin}/../lib";

use My::RuledPaper;
use My::RuledPaper::Constants qw(:all);
use My::RuledPaper::MonkeyPatch::Drawing;
use My::RuledPaper::Parse::Dimension qw(parseDimension);
use My::RuledPaper::Parse::GridStyle qw(parseGridStyle);
use My::RuledPaper::Parse::PaperSize qw(parsePaperSize);

use POSIX qw(floor);
use List::Util qw(all);
use Scalar::Util qw(looks_like_number);
use Data::Dumper qw(Dumper);

our @paperSize;
our $gridStyle;
our $gridType = $PROGNAME;
our $strokeWidths = ["1/600in", "2/600in", "4/600in"];

use Getopt::Long;
Getopt::Long::Configure(qw(gnu_compat bundling no_ignore_case));
Getopt::Long::GetOptions(
    'page-size|paper-size|size=s' => sub { @paperSize = parsePaperSize($_[1]); },
    'grid-style|style=s'          => sub { $gridStyle = $_[1]; },
    'letter'                      => sub { @paperSize = LETTER; },
    'half-letter'                 => sub { @paperSize = HALF_LETTER; },
    'a5'                          => sub { @paperSize = A5; },
    'a4'                          => sub { @paperSize = A4; },
    'dot|dot-grid'                => sub { $gridType = 'dotgrid'; },
    'line|line-grid'              => sub { $gridType = 'linegrid'; },
    'stroke-widths=s'             => \$strokeWidths,
) or die();

if (!scalar @paperSize) {
    @paperSize = parsePaperSize('letter');
}

if (ref $strokeWidths eq '') {
    $strokeWidths = [split(/[\s,]+/, $strokeWidths)];
    $strokeWidths = [grep { /\S/ } @$strokeWidths];
}
$strokeWidths = [map { parseDimension($_) } @$strokeWidths];

my $NON_REPRO_BLUE = COLOR_NON_REPRO_BLUE;

my $FEINT_STROKE_WIDTH = $strokeWidths->[0];
my $MINOR_STROKE_WIDTH = $strokeWidths->[1];
my $MAJOR_STROKE_WIDTH = $strokeWidths->[2];

my $FEINT_DOT_WIDTH = 6/600 * IN;
my $MINOR_DOT_WIDTH = 8/600 * IN;
my $MAJOR_DOT_WIDTH = 10/600 * IN;

my $FONT_SIZE = 6 * PT;
my $TEXT_DOWN = 0.3 * $FONT_SIZE; # inkscape svg->pdf does not support css transform

if (!defined $gridStyle) {
    $gridStyle = '2.5mm,10';
}

$gridStyle = '2mm,12'   if $gridStyle eq '12';
$gridStyle = '2mm,4,12' if $gridStyle eq '412';
$gridStyle = '2mm,3,12' if $gridStyle eq '312';
$gridStyle = '2.5mm,10' if $gridStyle eq '10';

my ($spacing, $minor, $major) = parseGridStyle($gridStyle);

if (scalar @$strokeWidths < 3 && defined $major) {
    die("not enough stroke widths\n");
}
if (scalar @$strokeWidths < 2 && defined $minor) {
    die("not enough stroke widths\n");
}

for (my $i = 0; $i < $#$strokeWidths; $i += 1) {
    my $j = $i + 1;
    if (lessThanOrNearEqual($strokeWidths->[$j], $strokeWidths->[$i])) {
        die("invalid set of stroke widths\n");
    }
}
if (defined $minor && $minor <= 1) {
    die("minor grid number must be greater than one");
}
if (defined $major && $major <= 1) {
    die("major grid number must be greater than one");
}
if (defined $major && defined $minor && ($major <= $minor || $major % $minor != 0)) {
    die("major grid number must be a multiple of, and greater than,  minor grid number\n");
}

# account for floating point rounding errors
sub greaterThanOrNearEqual {
    my ($a, $b) = @_;
    return abs($a - $b) < 0.000001 || $a > $b;
}
sub lessThanOrNearEqual {
    my ($a, $b) = @_;
    return $a < $b || abs($a - $b) < 0.000001;
}

my $p = My::RuledPaper->new();
$p->{width} = $paperSize[0];
$p->{height} = $paperSize[1];

$p->{style} = <<"END";
line, rect {
    fill: none;
    stroke-width: ${FEINT_STROKE_WIDTH}px;
    stroke: ${NON_REPRO_BLUE};
    stroke-linecap: round;
    stroke-linejoin: round;
}
line.minor, rect.minor {
    stroke-width: ${MINOR_STROKE_WIDTH}px;
}
line.major, rect.major {
    stroke-width: ${MAJOR_STROKE_WIDTH}px;
}
text {
    text-anchor: middle;
    font-family: 'Times New Roman', 'Times Roman', serif;
    font-size: ${FONT_SIZE}px;
    fill: ${NON_REPRO_BLUE};
}
circle {
    fill: ${NON_REPRO_BLUE};
}
END

use POSIX qw(floor);

my $cx = $p->{width} / 2;
my $cy = $p->{height} / 2;
my $xTicks = floor($cx / $spacing);
my $yTicks = floor($cy / $spacing);
my ($startXTicks, $endXTicks) = (-$xTicks, $xTicks);
my ($startYTicks, $endYTicks) = (-$yTicks, $yTicks);
my $centerXTicks = 0;
my $centerYTicks = 0;

# more major divisions if possible
if (defined $major && $major && ($major % 2 == 0)) {
    if ($endXTicks % $major >= ($major / 2)) {
        $centerXTicks = $major / 2;
    }
    if ($endYTicks % $major >= ($major / 2)) {
        $centerYTicks = $major / 2;
    }
}

my $startXX = $cx + $startXTicks * $spacing;
my $endXX   = $cx + $endXTicks   * $spacing;
my $startYY = $cy + $startYTicks * $spacing;
my $endYY   = $cy + $endYTicks   * $spacing;

if ($gridType eq 'linegrid') {
    for (my $x = $startXTicks; $x <= $endXTicks; $x += 1) {
        my $xIsMajor = defined $major && ($x + $centerXTicks) % $major == 0;
        my $xIsMinor = defined $minor && ($x + $centerXTicks) % $minor == 0;
        my $xx = $cx + $x * $spacing;
        my $class = $xIsMajor ? 'major' : $xIsMinor ? 'minor' : 'feint';
        $p->line($xx, $startYY, $xx, $endYY, class => $class);
    }
    for (my $y = $startYTicks; $y <= $endYTicks; $y += 1) {
        my $yIsMajor = defined $major && ($y + $centerYTicks) % $major == 0;
        my $yIsMinor = defined $minor && ($y + $centerYTicks) % $minor == 0;
        my $yy = $cy + $y * $spacing;
        my $class = $yIsMajor ? 'major' : $yIsMinor ? 'minor' : 'feint';
        $p->line($startXX, $yy, $endXX, $yy, class => $class);
    }
} elsif ($gridType eq 'dotgrid') {
    for (my $x = $startXTicks; $x <= $endXTicks; $x += 1) {
        my $xx = $cx + $x * $spacing;
        for (my $y = $startYTicks; $y <= $endYTicks; $y += 1) {
            my $yy = $cy + $y * $spacing;
            my $xIsMajor = defined $major && ($x + $centerXTicks) % $major == 0;
            my $yIsMajor = defined $major && ($y + $centerYTicks) % $major == 0;
            my $xIsMinor = defined $minor && ($x + $centerXTicks) % $minor == 0;
            my $yIsMinor = defined $minor && ($y + $centerYTicks) % $minor == 0;
            my $class = 'feint';
            if (defined $major && $xIsMajor && $yIsMajor) {
                $class = 'major';
            } elsif (defined $minor && $xIsMinor && $yIsMinor) {
                $class = 'minor';
            }
            my $r = $class eq 'major' ? $MAJOR_DOT_WIDTH : $class eq 'minor' ? $MINOR_DOT_WIDTH : $FEINT_DOT_WIDTH;
            $p->add('circle', cx => $xx, cy => $yy, r => $r);
        }
    }
}


print($p->svg());
