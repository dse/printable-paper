#!/usr/bin/env perl
use warnings;
use strict;
use v5.10.0;

# on Cygwin:
#     apt-cyg install libpaper1 libpaper-bin
# on other systems:
#     it's part of something called libpaper.
#     git@github.com:naota/libpaper.git
# to list all paper sizes and their widths and heights:
#     paperconf -a -n -s
# to get the default paper size:
#     paperconf

our $opt_papersize;
our $opt_width;
our $opt_height;
our $opt_unit_type;
our $opt_color_type;
our @opt_modifiers;

our $opt_id;
our $opt_filename;

use Getopt::Long;
use Data::Dumper;
use Carp::Always;

use FindBin;
use lib "${FindBin::Bin}/../lib";

Getopt::Long::Configure(qw(bundling gnu_compat no_ignore_case));
Getopt::Long::GetOptions(
    "M|p|media|paper|paper-size=s"    => \$opt_papersize,
    "w|width=s"                       => \$opt_width,
    "h|height=s"                      => \$opt_height,
    "g|gray|grey|grayscale|greyscale" => sub { $opt_color_type = "grayscale"; },
    "b|black"                         => sub { $opt_color_type = "black";     },
    "c|color|colour"                  => sub { $opt_color_type = "color";     },
    "m|metric"                        => sub { $opt_unit_type = "metric";     },
    "i|imperial"                      => sub { $opt_unit_type = "imperial";   },
    "modifier=s"                      => sub { push(@opt_modifiers, $_[1]); },
    'id=s'                            => \$opt_id,
    'filename=s'                      => \$opt_filename,
    "help|?" => sub {
        usage();
        exit(0);
    }
) or die("Type '$0 --help' for help.\n");

sub usage { print <<"EOF"; }
usage:
    $0 [<option> ...]
options:
    -M, -p, --media, --paper, --paper-size=<paper-size-name>|<custom-paper-size>
        Specify paper size (run paperconf -a -n -s to list paper sizes)
    -w, --width=<width>
    -h, --height=<height>
    -?, --help
<width> or <height>:
    <number> [<unit>]           <unit> defaults to pt
    <number>/<number> [<unit>]
<custom-paper-size>:
    <width> *|x <height>        height <unit> defaults to pt;
                                width <unit> defaults to same <unit> as height
examples:
    --width=8.5in       --paper-size='8.5in x 11in'     --paper-size=letter
    --width=612         --paper-size='612*792'
    --height=297mm      --paper-size='210.224x297.302mm'
EOF

use My::Printable::Document;
use My::Printable::Element::Grid;
use My::Printable::Element::Line;
use My::Printable::Element::Lines;

foreach my $ruling (@ARGV) {
    my $class_suffix = $ruling;
    $class_suffix =~ s{(^|[-_]+)
                       ([[:alpha:]])}
                      {uc $2}gex;
    my $ruling_class_name = "My::Printable::Ruling::" . $class_suffix;

    eval "use $ruling_class_name";
    if ($@) {
        die $@;
    }
    my $ruling = $ruling_class_name->new();
    $ruling->id($opt_id)                  if defined $opt_id;
    $ruling->filename($opt_filename)      if defined $opt_filename;
    $ruling->setPaperSize($opt_papersize) if defined $opt_papersize;
    $ruling->setWidth($opt_width)         if defined $opt_width;
    $ruling->setHeight($opt_height)       if defined $opt_height;
    $ruling->unitType($opt_unit_type)     if defined $opt_unit_type;
    $ruling->colorType($opt_color_type)   if defined $opt_color_type;
    $ruling->setModifiers(@opt_modifiers);
    $ruling->generate();
    $ruling->print();
}
