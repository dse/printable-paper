#!/usr/bin/env perl
use warnings;
use strict;
use v5.10.0;

# on Cygwin:
#     apt-cyg install libpaper1 libpaper-bin
# on other systems:
#     it's part of something called libpaper.
#     git@github.com:naota/libpaper.git
# to list all paper sizes and their widths and heights:
#     paperconf -a -n -s
# to get the default paper size:
#     paperconf

our $opt_papersize;
our $opt_width;
our $opt_height;
our $opt_unit_type;
our $opt_color_type;
our @opt_modifiers;
our $opt_list_ruling_names;
our $opt_list_rulings;

our $opt_id;
our $opt_filename;

our $opt_2up;
our $opt_2page;
our $opt_pdf;
our $opt_ps;

our $opt_dry_run;
our $opt_verbose = 0;

use lib "$ENV{HOME}/git/dse.d/utilities/lib";
use My::Text::Table;

use Getopt::Long;
use Data::Dumper;
use Carp::Always;

use FindBin;
use lib "${FindBin::Bin}/../lib";

Getopt::Long::Configure(qw(bundling gnu_compat no_ignore_case));
Getopt::Long::GetOptions(
    "M|p|media|paper|paper-size=s"    => \$opt_papersize,
    "w|width=s"                       => \$opt_width,
    "h|height=s"                      => \$opt_height,
    "g|gray|grey|grayscale|greyscale" => sub { $opt_color_type = "grayscale"; },
    "b|black"                         => sub { $opt_color_type = "black";     },
    "c|color|colour"                  => sub { $opt_color_type = "color";     },
    "m|metric"                        => sub { $opt_unit_type = "metric";     },
    "i|imperial"                      => sub { $opt_unit_type = "imperial";   },
    "modifier=s"                      => sub { push(@opt_modifiers, $_[1]); },
    'id=s'                            => \$opt_id,
    'filename=s'                      => \$opt_filename,
    'list-ruling-names'               => \$opt_list_ruling_names,
    'list-rulings'                    => \$opt_list_rulings,
    'two-up|generate-two-up|generate-2up'           => \$opt_2up,
    'two-page|generate-two-page|generate-2page'     => \$opt_2page,
    'ps|postscript|generate-ps|generate-postscript' => \$opt_ps,
    'pdf|generate-pdf'                              => \$opt_pdf,
    'n|dry-run' => \$opt_dry_run,
    'v|verbose+' => \$opt_verbose,
    "help|?" => sub {
        usage();
        exit(0);
    }
) or die("Type '$0 --help' for help.\n");

sub usage { print <<"EOF"; }
usage:
    $0 [<option> ...]
options:
    -M, -p, --media, --paper, --paper-size=<paper-size-name>|<custom-paper-size>
        Specify paper size (run paperconf -a -n -s to list paper sizes)
    -w, --width=<width>
    -h, --height=<height>
    -?, --help
<width> or <height>:
    <number> [<unit>]           <unit> defaults to pt
    <number>/<number> [<unit>]
<custom-paper-size>:
    <width> *|x <height>        height <unit> defaults to pt;
                                width <unit> defaults to same <unit> as height
examples:
    --width=8.5in       --paper-size='8.5in x 11in'     --paper-size=letter
    --width=612         --paper-size='612*792'
    --height=297mm      --paper-size='210.224x297.302mm'
EOF

use My::Printable::Document;
use My::Printable::Ruling;
use My::Printable::Unit qw(:const);

if ($opt_list_ruling_names || $opt_list_rulings) {
    use My::Printable::Util::Installed;
    my $inst = My::Printable::Util::Installed->new();
    if ($opt_list_ruling_names) {
        say foreach @{$inst->rulingNameList};
    }
    if ($opt_list_rulings) {
        my $tt = My::Text::Table->new();
        $tt->header(
            'Ruling',
            'Lines',
            'Width',
            'Feint Lines',
            'Width',
            'Dots',
            'Width',
            'Margin Lines',
            'Width',
        );
        foreach my $ruling_name (@{$inst->rulingNameList}) {
            $tt->addRow($ruling_name // '');
            foreach my $colorType ('color', 'grayscale', 'black') {
                my $object = create_ruling_object($ruling_name);
                $object->colorType($colorType);
                my $dotCSSClass        = eval { $object->getDotCSSClass; };
                my $lineCSSClass       = eval { $object->getLineCSSClass; };
                my $feintLineCSSClass  = eval { $object->getFeintLineCSSClass; };
                my $marginLineCSSClass = eval { $object->getMarginLineCSSClass; };

                my $lineWidth          = eval { $object->getLineWidth()       / PD * PT; } // 0;
                my $feintLineWidth     = eval { $object->getFeintLineWidth()  / PD * PT; } // 0;
                my $dotWidth           = eval { $object->getDotWidth()        / PD * PT; } // 0;
                my $marginLineWidth    = eval { $object->getMarginLineWidth() / PD * PT; } // 0;
                $tt->addRow(
                    '    ' . $colorType,
                    $lineCSSClass // '-',
                    sprintf('%.3g', $lineWidth),
                    $feintLineCSSClass // '-',
                    sprintf('%.3g', $feintLineWidth),
                    $dotCSSClass // '-',
                    sprintf('%.3g', $dotWidth),
                    $marginLineCSSClass // '-',
                    sprintf('%.3g', $marginLineWidth),
                );
            }
        }
        print $tt->as_string;
    }
}

foreach my $ruling_name (@ARGV) {
    my $object = create_ruling_object($ruling_name);
    $object->generate();
    $object->print();
}

sub create_ruling_object {
    my ($ruling_name, @args) = @_;
    my $ruling_class_name = My::Printable::Ruling->getRulingClassName($ruling_name);
    eval "use $ruling_class_name";
    if ($@) {
        die $@;
    }
    my $object = $ruling_class_name->new();
    $object->id($opt_id)                   if defined $opt_id;
    $object->filename($opt_filename)       if defined $opt_filename;
    $object->paperSizeName($opt_papersize) if defined $opt_papersize;
    $object->width($opt_width)             if defined $opt_width;
    $object->height($opt_height)           if defined $opt_height;
    $object->unitType($opt_unit_type)      if defined $opt_unit_type;
    $object->colorType($opt_color_type)    if defined $opt_color_type;
    $object->generate2Page($opt_2page)     if defined $opt_2page;
    $object->generate2Up($opt_2up)         if defined $opt_2up;
    $object->generatePS($opt_ps)           if defined $opt_ps;
    $object->generatePDF($opt_pdf)         if defined $opt_pdf;
    $object->dryRun($opt_dry_run)          if defined $opt_dry_run;
    $object->verbose($opt_verbose)         if defined $opt_verbose;
    $object->modifiers->set(@opt_modifiers);
    return $object;
}
