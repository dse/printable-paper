#!/usr/bin/env perl
use warnings;
use strict;
use open qw(locale);

use FindBin;
use lib "${FindBin::Bin}/../lib";

use My::RuledPaper;
use My::RuledPaper::Constants qw(:all);

use List::Util qw(all);
use Scalar::Util qw(looks_like_number);

my $FONT_SIZE = 6 * PT;
my $TEXT_DOWN = 0.3 * $FONT_SIZE; # inkscape svg->pdf does not support css transform

my $p = My::RuledPaper->new(HALF_LETTER);

$p->{style} = <<"END";
text {
    text-anchor: middle;
    font-family: 'Times New Roman', 'Times Roman', serif;
    font-size: ${FONT_SIZE}px;
    fill: #cccccc;
}
circle {
    fill: #cccccc;
}
END

sub dotGrid {
    my ($cx, $cy, $xDots, $yDots, $spacing);
    my %args;
    if (scalar @_ >= 5 && all { looks_like_number($_) } @_[0 .. 4]) {
        ($cx, $cy, $xDots, $yDots, $spacing) = splice(@_, 0, 4);
    }
    %args = @_;
    $cx = $args{cx} // $cx;
    $cy = $args{cy} // $cy;
    $xDots = $args{xDots} // $xDots;
    $yDots = $args{yDots} // $yDots;
    $spacing = $args{spacing} // $spacing;

    my $xDotMult = $args{xDotMult};
    my $yDotMult = $args{yDotMult};

    my $startX = $cx - $xDots * $spacing / 2;
    my $startY = $cy - $yDots * $spacing / 2;
    my $i = 0;
    for (my $x = 0; $x <= $xDots; $x += 1) {
        for (my $y = 0; $y <= $yDots; $y += 1) {
            my $xx = $startX + $spacing * $x;
            my $yy = $startY + $spacing * $y;
            $p->add('circle', cx => $xx, cy => $yy, r => 1);
            $i += 1;
        }
    }
    if ($args{numerals}) {
        my $FACTOR = 0.6;
        my $y1 = $startY - $spacing * $FACTOR;
        my $y2 = $startY + $spacing * ($yDots + $FACTOR);
        my $x1 = $startX - $spacing * $FACTOR;
        my $x2 = $startX + $spacing * ($xDots + $FACTOR);
        for (my $x = 0; $x <= $xDots; $x += $args{numerals}) {
            my $xx = $startX + $spacing * $x;
            $p->add('text', x => $xx, y => $y1 + $TEXT_DOWN, _content => $x); # top
            $p->add('text', x => $xx, y => $y2 + $TEXT_DOWN, _content => $x); # bottom
        }
        for (my $y = 0; $y <= $yDots; $y += $args{numerals}) {
            my $yy = $startY + $spacing * $y;
            $p->add('text', x => $x1, y => $yy + $TEXT_DOWN, _content => $y, style => 'text-anchor: middle'); # left
            $p->add('text', x => $x2, y => $yy + $TEXT_DOWN, _content => $y, style => 'text-anchor: middle'); # right
        }
    }
    if ($args{majorDots}) {
        for (my $mod = 2; $mod <= 3; $mod += 1) {
            for (my $i = 1; $i < $mod; $i += 1) { # dots away from left or bottom side
                for (my $j = 1; $j < $mod; $j += 1) {
                    my $FACTOR = 0.15;
                    my $x1 = $startX - $j * $FACTOR * $spacing;
                    my $y1 = $startY - $j * $FACTOR * $spacing;
                    my $x3 = $startX + ($xDots + $j * $FACTOR) * $spacing;
                    my $y3 = $startY + ($yDots + $j * $FACTOR) * $spacing;
                    my $x2 = $startX + $xDots / $mod * $i * $spacing;
                    my $y2 = $startY + $yDots / $mod * $i * $spacing;
                    $p->add('circle', cx => $x1, cy => $y2, r => 1); # left
                    $p->add('circle', cx => $x3, cy => $y2, r => 1); # right
                    $p->add('circle', cx => $x2, cy => $y1, r => 1); # top
                    $p->add('circle', cx => $x2, cy => $y3, r => 1); # bottom
                }
            }
        }
    }
}

my $spacing = 1/5 * IN;
my $xDots = 24;
my $yDots = 36;
my $yDotsExtra = 2;
my $xDotsExtra = 2;
my $cx = $p->{width} * 1/2;
my $cy = $p->{height} * 1/2 + ($yDotsExtra / 2) * $spacing;

dotGrid(cx => $cx, cy => $cy,
        xDots => $xDots, yDots => $yDots,
        spacing => $spacing,
        majorDots => 1,
        numerals => 6);

dotGrid(cx => $cx, cy => $cy - ($yDots/2 + 1.5 + $yDotsExtra/2) * $spacing,
        xDots => $xDots + $xDotsExtra,
        yDots => $yDotsExtra - 1,
        spacing => $spacing);

print($p->svg());

# Local Variables:
# after-save-hook: ((lambda () (shell-command "cd .. && make")))
# End:
